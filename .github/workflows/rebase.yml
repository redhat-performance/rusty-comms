# This workflow performs the rebase on a pull request.
# It is triggered by a `repository_dispatch` event, which is created by the
# "Slash Command Dispatcher" workflow when a user issues the `/rebase` command.

name: Rebase PR

on:
  repository_dispatch:
    types: [rebase-command]

jobs:
  rebase:
    runs-on: ubuntu-latest
    steps:
      # First, we need to check out the code of the pull request branch.
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          # The repository and ref are extracted from the event payload sent by the dispatcher.
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
          
          # IMPORTANT: A Personal Access Token (PAT) with 'repo' scope is required here.
          # The default GITHUB_TOKEN does not have permission to push to protected branches
          # or branches in forks. You must create a PAT and add it to your repository's
          # secrets with the name 'PAT'.
          token: ${{ secrets.PAT }}

      # This action performs the rebase.
      - name: Rebase
        uses: cirrus-actions/rebase@1.8
        env:
          # The GITHUB_TOKEN is used by the action to post comments on the PR,
          # for example, if the rebase fails due to merge conflicts.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # We rebase onto the PR's base branch (e.g., 'main' or 'develop').
          branch: ${{ github.event.client_payload.pull_request.base.ref }}
