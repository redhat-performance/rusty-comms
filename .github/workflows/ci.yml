name: CI

on:
  push:
    branches: [ main, develop, feature/add-ci ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint_and_format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: Check formatting
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        if ! cargo fmt --all -- --check; then
          # Only comment on Pull Request events
          if [ -n "$PR_NUMBER" ]; then
            MARKER="<!-- gemini-fmt-error -->"
            BODY="$MARKER
            ⚠️ **ERROR:** Code formatting issues detected. Please run \`cargo fmt --all\` locally and commit the changes."
            
            # Check if a comment with our marker already exists to avoid spamming
            existing_comment=$(gh pr view "$PR_NUMBER" --json comments -q ".comments[] | select(.body | contains(\"$MARKER\")) | .id")
            
            if [ -z "$existing_comment" ]; then
              gh pr comment "$PR_NUMBER" --body "$BODY"
            else
              echo "A formatting error comment already exists. Skipping."
            fi
          fi
          exit 1
        fi

    - name: Check with clippy
      if: always()
      run: |
        set -o pipefail
        cargo clippy --all-targets --all-features --message-format=json -- -D warnings | jq -r 'select(.reason == "compiler-message" and .message.spans[0].is_primary) | .message | "::warning file=\(.spans[0].file_name),line=\(.spans[0].line_start)::\(.message)"'

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read MSRV from Cargo.toml
      id: read_msrv
      run: |
        msrv=$(awk -F '"' '/rust-version/ {print $2}' Cargo.toml)
        echo "msrv=$msrv" >> $GITHUB_OUTPUT

    - name: Install MSRV Rust (${{ steps.read_msrv.outputs.msrv }})
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ steps.read_msrv.outputs.msrv }}

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Remove lockfile to allow old Cargo to resolve deps
      run: rm Cargo.lock

    - name: Check if project builds with MSRV
      run: cargo build --verbose

  build_and_test:
    name: Build and Test
    needs:
      - lint_and_format
      - security_audit
      - msrv
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on Windows and macOS to reduce CI time
          - os: windows-latest
            rust: beta
          - os: macOS-latest
            rust: beta
    outputs:
      outcome: ${{ steps.check_status.outputs.outcome }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo target
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Build release
      run: cargo build --release --verbose

    - name: Run benchmark (dry run)
      run: cargo run --release -- --help

    - name: Check Job Status
      id: check_status
      if: always()
      run: echo "outcome=${{ job.status }}" >> $GITHUB_OUTPUT

  build_status_check:
    name: Build Status Checks
    runs-on: ubuntu-latest
    needs: build_and_test
    # 'if: always()' ensures this job runs even if the parent 'build_and_test' job
    # is considered "successful" due to the continue-on-error strategy.
    if: always()

    steps:
      - name: Check Platform Test Results
        # The 'needs' context contains the outputs of all matrix jobs it depends on.
        # We check the 'outcome' output from each matrix job. If any of them are not
        # 'success', we fail this job to provide an accurate overall workflow status.
        run: |
          echo '${{ toJSON(needs.build_and_test.outputs) }}'
          if echo '${{ toJSON(needs.build_and_test.outputs) }}' | jq 'any(.[]; .outcome != "success")' | grep -q true; then
            echo "One or more platform tests failed, were cancelled, or were skipped."
            exit 1
          else
            echo "All platform tests passed."
          fi

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: build_and_test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-bench-

    - name: Run benchmarks
      run: cargo bench --verbose

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'cargo'
        output-file-path: target/criterion/reports/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  podman:
    name: Container Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build container image
      run: podman build -t ipc-benchmark -f Containerfile .

    - name: Test container image
      run: podman run --rm ipc-benchmark --help

